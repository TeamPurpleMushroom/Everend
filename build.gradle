plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    // Adds the Kotlin Gradle plugin
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.22'
    id 'org.spongepowered.mixin' version '0.7.+'
}

apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, 'mixins.neverend.refmap.json'
    config 'mixins.neverend.json'
    debug = true
    debug.verbose = true
    debug.export = true
    checks.interfaces = true
//    env.remapRefMap = true
//    env.refMapRemappingFile = "${projectDir}\\build\\\\createSrgToMcp\\\\output.srg"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://repo.repsy.io/mvn/timeconqueror/mc/" }
    maven { url = 'https://thedarkcolour.github.io/KotlinForForge/' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public' }

    //Accessories mavens (-) sinytra (broken, may be fixed at some point)
    //maven { url 'https://maven.wispforest.io/releases' }
    //maven { url 'https://maven.fabricmc.net' }
    //maven { url 'https://maven.shedaniel.me/' }

    //Sinyta maven
    maven { url 'https://maven.su5ed.dev/releases' }

    //Curse maven
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository)
        filter {
            includeGroup "maven.modrinth"
        }
    }

    //Curios maven
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Adds KFF as dependency and Kotlin libs
    implementation 'thedarkcolour:kotlinforforge:4.10.0'
    implementation fg.deobf('ru.timeconqueror:TimeCore:1.20.1-3.11.0.0.build16')

    //Accessories (broken, may be fixed at some point)
    //implementation("io.wispforest:accessories-neoforge:1.0.0-beta.40+1.20.1")

    //Sinytra Connector + Forgified Fabric API (for ortho camera)
    //minecraftLibrary fg.deobf("org.sinytra:Connector:1.0.0-beta.46+1.20.1")
    //compileOnly "dev.su5ed.sinytra.fabric-api:fabric-api:0.92.2+1.11.8+1.20.1"
    //runtimeOnly fg.deobf("dev.su5ed.sinytra.fabric-api:fabric-api:0.92.2+1.11.8+1.20.1")
    //runtimeOnly fg.deobf("maven.modrinth:orthocamera:0.1.7+1.20.1")

    //Trinkets
    //implementation fg.deobf("curse.maven:trinkets-341284:5173501")

    //Curios
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.9.1+1.20.1")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.9.1+1.20.1:api")
}
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
